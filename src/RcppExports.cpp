// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpp_tprod_A_X_Bt
arma::cube cpp_tprod_A_X_Bt(const arma::cube& X, const arma::mat& A, const arma::mat& B);
RcppExport SEXP _sir_cpp_tprod_A_X_Bt(SEXP XSEXP, SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_tprod_A_X_Bt(X, A, B));
    return rcpp_result_gen;
END_RCPP
}
// cpp_amprod_W_v
arma::mat cpp_amprod_W_v(const arma::cube& W, const arma::vec& v);
RcppExport SEXP _sir_cpp_amprod_W_v(SEXP WSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_amprod_W_v(W, v));
    return rcpp_result_gen;
END_RCPP
}
// cpp_construct_Wbeta_design
arma::mat cpp_construct_Wbeta_design(const arma::cube& W, const arma::cube& X, const arma::vec& beta);
RcppExport SEXP _sir_cpp_construct_Wbeta_design(SEXP WSEXP, SEXP XSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_construct_Wbeta_design(W, X, beta));
    return rcpp_result_gen;
END_RCPP
}
// cpp_construct_Walpha_design
arma::mat cpp_construct_Walpha_design(const arma::cube& W, const arma::cube& X, const arma::vec& alpha);
RcppExport SEXP _sir_cpp_construct_Walpha_design(SEXP WSEXP, SEXP XSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_construct_Walpha_design(W, X, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mll_gH
Rcpp::List cpp_mll_gH(const arma::vec& tab, const arma::cube& Y, const arma::cube& W, const arma::cube& X, const Rcpp::List& Z_list, const std::string& family);
RcppExport SEXP _sir_cpp_mll_gH(SEXP tabSEXP, SEXP YSEXP, SEXP WSEXP, SEXP XSEXP, SEXP Z_listSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type tab(tabSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Z_list(Z_listSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mll_gH(tab, Y, W, X, Z_list, family));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sir_cpp_tprod_A_X_Bt", (DL_FUNC) &_sir_cpp_tprod_A_X_Bt, 3},
    {"_sir_cpp_amprod_W_v", (DL_FUNC) &_sir_cpp_amprod_W_v, 2},
    {"_sir_cpp_construct_Wbeta_design", (DL_FUNC) &_sir_cpp_construct_Wbeta_design, 3},
    {"_sir_cpp_construct_Walpha_design", (DL_FUNC) &_sir_cpp_construct_Walpha_design, 3},
    {"_sir_cpp_mll_gH", (DL_FUNC) &_sir_cpp_mll_gH, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_sir(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
