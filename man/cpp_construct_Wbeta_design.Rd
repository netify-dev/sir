% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{cpp_construct_Wbeta_design}
\alias{cpp_construct_Wbeta_design}
\title{Construct Design Matrix for Alpha Updates in ALS}
\usage{
cpp_construct_Wbeta_design(W, X, beta)
}
\arguments{
\item{W}{Three-dimensional array (m x m x p) of influence covariates.
These parameterize how influence flows through the network.}

\item{X}{Three-dimensional array (m x m x T) of network states over time.
Typically contains lagged outcomes that carry influence forward.}

\item{beta}{Vector (p x 1) of current receiver effect parameters.
These are held fixed while updating alpha in this ALS step.}
}
\value{
Matrix (m*m*T x p) that serves as the design matrix for GLM estimation.
  Each column corresponds to one influence covariate, rows match vectorized Y.
}
\description{
Builds the design matrix for updating sender effects (alpha parameters) in the
Alternating Least Squares algorithm, holding receiver effects (beta) fixed.
}
\details{
In the ALS algorithm, when updating alpha with beta fixed, the model becomes
linear in alpha. The design matrix for this GLM sub-problem has columns
corresponding to each influence covariate.

For covariate k and observation (i,j,t), the design matrix element is:
[W[,,k] * X[,,t] * B'][i,j]

Where B = sum_l beta[l] * W[,,l] is the current receiver effects matrix.

The algorithm:
1. Compute B from current beta and W
2. For each covariate k:
   - Calculate W[,,k] * X * B' for all time points
   - Flatten to match the vectorized Y
3. Combine into design matrix

This C++ implementation is 10-100x faster than the equivalent R code using
loops or apply functions, making ALS feasible for larger networks.
}
\note{
This function is called once per ALS iteration. The resulting matrix can
  be large (mÂ²T x p), so memory usage should be considered for big networks.
}
\examples{
\dontrun{
// Called internally by sir_alsfit during the alpha update step
// After computing this design matrix, the update is:
// glm(Y ~ -1 + cbind(Z_design, Wbeta_design), family=...)
}

}
